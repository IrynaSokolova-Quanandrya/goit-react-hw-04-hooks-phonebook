{"version":3,"sources":["components/Input.js","components/ContactForm.js","components/ContactList.js","components/Filter.js","App.js","index.js"],"names":["Input","onChange","labelName","value","id","type","name","pattern","title","className","htmlFor","e","target","required","ContactForm","onSubmit","inputId","nanoid","useState","setName","number","setNumber","handleChange","reset","console","log","preventDefault","ContactList","contacts","onDeleteContact","map","onClick","Filter","INITIAL_CONTACTS_LIST","Phonebook","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","friendName","some","alert","contact","prev","normalizedFilter","toLowerCase","includes","getFilterSearch","nameId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a2ff486.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/input.css\";\n\nexport default function Input({\n  onChange,\n  labelName,\n  value,\n  id,\n  type,\n  name,\n  pattern,\n  title }) {\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    onChange({ value, name });\n  };\n   return (\n      <label className=\"label\" htmlFor={id}>\n        {labelName}\n        <input\n          className=\"input\"\n          value={value}\n          onChange={handleChange}\n          id={id}\n          type={type}\n          name={name}\n          pattern={pattern}\n          title={title}\n          required\n        />\n      </label>\n    );\n  \n}\n","import { useState} from \"react\";\nimport \"../styles/form.css\";\nimport \"../styles/button.css\";\nimport Input from \"../components/Input\";\nimport { nanoid } from \"nanoid\";\n\nfunction ContactForm({onSubmit}) {\n  const inputId = nanoid();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\nconst handleChange = ({ name, value}) => {\n  switch (name) {\n    case 'name':\n      setName(value);\n      break;\n    case 'number':\n      setNumber(value);\n      break;\n    default:\n      return;\n    }\n  };\n const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n  const reset = () => {\n   console.log({name});\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit}>\n        <Input\n          labelName=\"Name\"\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          id={inputId}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <Input\n          labelName=\"Number\"\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          id={inputId}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n        <button type=\"submit\" className=\"btn\">\n          Add contact\n        </button>\n      </form>\n  )\n}\nexport default ContactForm\n\n// export default class ContactForm extends Component {\n//   inputId = nanoid();\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n  // handleChange = ({ name, value }) => {\n  //   this.setState({ [name]: value });\n  //   console.log(this.state);\n  // };\n  // handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   this.props.onSubmit(this.state);\n  //   this.reset();\n  // };\n  // reset = () => {\n  //   this.setState({ name: \"\", number: \"\" });\n  // };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n      // <form className=\"form\" onSubmit={this.handleSubmit}>\n      //   <Input\n      //     labelName=\"Name\"\n      //     value={name}\n      //     onChange={this.handleChange}\n      //     type=\"text\"\n      //     id={this.inputId}\n      //     name=\"name\"\n      //     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      //     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      //     required\n      //   />\n      //   <Input\n      //     labelName=\"Number\"\n      //     value={number}\n      //     onChange={this.handleChange}\n      //     type=\"tel\"\n      //     id={this.inputId}\n      //     name=\"number\"\n      //     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      //     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      //     required\n      //   />\n      //   <button type=\"submit\" className=\"btn\">\n      //     Add contact\n      //   </button>\n      // </form>\n//     );\n//   }\n// }\n","import  React from \"react\";\nimport \"../styles/button.css\";\nimport \"../styles/contactList.css\";\n\nexport default function ContactList({ contacts, onDeleteContact }) {\n  return (\n      <ul className=\"contact__list\">\n        {contacts.map(({ id, name, number }) => (\n          <li className=\"contact__item\" key={id}>\n            {name}: {number}\n            <button\n              type=\"button\"\n              className=\"btn\"\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    );\n}\n","import React from \"react\";\nimport \"../styles/input.css\";\nimport \"../styles/button.css\";\n\nexport default function Filter ({value, onChange}) {\n    return (\n      <label className=\"label filter__label\">\n        Find contacts by name\n        <input\n          className=\"input\"\n          value={value}\n          onChange={onChange}\n          type=\"text\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n    );\n}\n","import { useEffect, useState} from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\nconst INITIAL_CONTACTS_LIST = [\n    { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n  ]\nfunction Phonebook() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(window.localStorage.getItem('contacts')) ?? INITIAL_CONTACTS_LIST);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {localStorage.setItem('contacts', JSON.stringify(contacts))\n  }, [contacts])\n  \n  const addSubmitData = ({ name, number }) => {\n    const friendName = name;\n    console.log(contacts);\n    console.log(friendName);\n    if (contacts.some(({ name }) => name === friendName)) {\n      alert(`${name} is already in contact`);\n      return;\n    }\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    console.log(contact);\n    setContacts((prev) => \n      [...prev, contact]\n    );\n  };\n  \n  const changeFilter = (e) => {\n    setFilter(e.target.value );\n  };\n  \n  const getFilterSearch = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  \n  const deleteContact = (nameId) => {\n    setContacts((prev) => (prev.filter((contact) => contact.id !== nameId)\n    ));\n  };\n  // const filterSearch = this.getFilterSearch();\n  return (\n    <div>\n      <h1 className=\"title\">Phonebook</h1>\n      <ContactForm onSubmit={addSubmitData} />\n      <h2 className=\"title\">Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactList\n        contacts={getFilterSearch()}\n        onDeleteContact={deleteContact}\n      />\n    </div>\n  );\n}\n//   state = {\n//     contacts: [\n//       { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//       { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//       { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//       { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n//     ],\n//     filter: \"\",\n//   };\n\n//   componentDidMount(prevProps, prevState) {\n//     const contacts = localStorage.getItem('contacts')\n//     const parseContacts = JSON.parse(contacts)\n\n//     this.setState({contacts: parseContacts})\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n//     }\n//   }\n\n  // addSubmitData = ({ name, number }) => {\n  //   const friendName = name;\n  //   if (this.state.contacts.some(({ name }) => name === friendName)) {\n  //     alert(`${name} is already in contact`);\n  //     return;\n  //   }\n  //   const contact = {\n  //     id: nanoid(),\n  //     name,\n  //     number,\n  //   };\n  //   this.setState(({ contacts }) => {\n  //     return { contacts: [...contacts, contact] };\n  //   });\n  // };\n  // changeFilter = (e) => {\n  //   console.log(e);\n  //   this.setState({ filter: e.target.value });\n  // };\n  // getFilterSearch = () => {\n  //   const { contacts, filter } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n  // deleteContact = (nameId) => {\n  //   console.log(nameId);\n  //   this.setState((prev) => ({\n  //     contacts: prev.contacts.filter((contact) => contact.id !== nameId),\n  //   }));\n  // };\n\n//   render() {\n//     const { filter } = this.state;\n//     const filterSearch = this.getFilterSearch();\n    // return (\n    //   <div>\n    //     <h1 className=\"title\">Phonebook</h1>\n    //     <ContactForm onSubmit={this.addSubmitData} />\n    //     <h2 className=\"title\">Contacts</h2>\n    //     <Filter value={filter} onChange={this.changeFilter} />\n    //     <ContactList\n    //       contacts={filterSearch}\n    //       onDeleteContact={this.deleteContact}\n    //     />\n    //   </div>\n    // );\n//   }\n// }\n\nexport default Phonebook;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}